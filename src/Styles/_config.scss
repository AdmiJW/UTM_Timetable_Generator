
:root {
    --header-height: 110px;
    --time-delete-button-size: 20px;
    --large-screen-window-y-margin: 20px; 
}

$header-bg: #d63031;
$general-bg: #2c3e50;
$course-bg: #f7f7f7;
$course-item-bg: #3498db;
$footer-bg: black;

$btn-primary-bg: #3498db;
$btn-danger-bg: #e74c3c;
$btn-success-bg: #2ecc71;


$timetable-label-bg: #7f8082;
$timetable-sideColor-bg: #70ad46;
$timetable-oddRow-bg: #c6e0b3;
$timetable-evenRow-bg:#a9d08f;




/* =======================================================================================
    Mixin function largeScreenPadding()
    When the screen is very wide, add the corresponding padding so that the contents are
    limited to 1000px.
    The reason to not use max-width is because background color will not be applied
======================================================================================= */
@mixin largeScreenPadding() {
    padding-left: unquote(' max( 15px, calc( (100vw - 1000px) / 2) ) ') !important;
    padding-right: unquote(' max( 15px, calc( (100vw - 1000px) / 2 ) ) ') !important;
}


/* =======================================================================================
    Mixin function largeScreenMargin()
    When the screen is very wide, add the corresponding margin so that the contents are
    limited to 1000px.
    The reason to not use max-width is because it won't center your content automatically
======================================================================================= */
@mixin largeScreenMargin() {
    margin-left: unquote(' max( 20px, calc( (100vw - 1000px) / 2) ) ') !important;
    margin-right: unquote(' max( 20px, calc( (100vw - 1000px) / 2 ) ) ') !important;
}

/* =======================================================================================
    Mixin function flex( direction, justify, align )
    A mixin which will apply display flex, flex-direction, justify-content, align-items in
    just 1 line
======================================================================================= */
@mixin flex($direction, $justify, $align) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

/* =======================================================================================
    Mixin function font( font, size, color, align, bold )
    A mixin which will apply font family, size, color, text-align and bold in just 1 line
======================================================================================= */
$map-font-weight: (     //  Map the possible string font weights into their value
    "thin": 100,
    "light": 300,
    "regular": 400,
    "medium": 500,
    "bold": 700,
    "black": 900
);
@mixin font($font, $size, $color, $align, $bold) {
    @if ($font == 'roboto') {
        font-family: 'Roboto', sans-serif;
    }

    font-size: $size;
    color: $color;
    text-align: $align;

    // If the provided bold value is a string bold value, then get the value and apply to the font weight
    @if map-has-key( $map-font-weight , $bold ) {
        font-weight: map-get($map-font-weight, $bold);
    }
    font-weight: $bold;     // Otherwise attempt to apply the raw value into the font weight
} 



/* =======================================================================================
    Classes for the CourseItems, so that they will have different colors for each course
    The color is determined in the Javascript, the classes only apply the color themes
    correctly
======================================================================================= */
// Color mapping
$color-map: (
    0: #3498db,
    1: #6ab04c,
    2: #e74c3c,
    3: #9b59b6,
    4: #34495e,
    5: #f1c40f,
    6: #3a40b6,
    7: #2ecc71,
    8: #e67e22,
    9: #686de0
);
// Creating each class using for each loop
@each $key, $value in $color-map {
    .course-item--#{$key}-theme {
        background-color: $value !important;
    }
}








/* =======================================================================================
    Base class for buttons. Remove the default button styles.
======================================================================================= */
%btn {
    appearance: none;
    border: none;
    box-shadow: 0px 5px 15px 0px rgba(0,0,0,0.1);
    background-color: rgba(0,0,0,0);
    
    cursor: pointer;
    @include flex(row, center, center);
}

/* =======================================================================================
    Mixin function btn-primary( size, font-size)
    Apply the style of a circular button with blue-ish background and white text
======================================================================================= */
@mixin btn-rounded($size, $color, $font-size) {
    background-color: $color !important;
    width: $size;
    height: $size;
    @include font('roboto', $font-size, white, center, 'thin');
    border-radius: 50%;
}

/* =======================================================================================
    Mixin function btn-ripple-effect( duration )
    Apply the background ripple effect when button is hovered or focused
======================================================================================= */
@mixin btn-ripple-effect($color, $duration) {
    z-index: 1;     //  So content will be in front of the after pseudo element

    &:hover::before, &:focus::before {
        content:'';
        position: absolute;
        z-index: -1;       // After pseudo element will be at back, but in front of background
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background-color:darken($color, 10%);
        animation: ripple $duration ease forwards;
    }

    // Keyframes for ripple effect
    @keyframes ripple {
        0% {
            opacity: 1;
            height: 0;
            width: 0;
        }
        50% {
            width: 100%;
            height: 100%;
            opacity: 1;
        }
        100% {
            opacity: 0;
        }
    }
}



%timetableText {
    height: 100%;
    @include flex(column, center, center);
}

/* =======================================================================================
    The blinking effect for the eye on the preview button
======================================================================================= */
@keyframes blink {
    0%, 50%, 100% {
        transform: scaleY(1);
    }
    25%, 75% {
        transform: scaleY(0);
    }
}

/* =======================================================================================
    Base class for select elements. Give it a more modern style
======================================================================================= */
@mixin selectHTML($font-size) {
    padding: 5px 0px;
    border-radius: 10px;

    @include font('roboto', $font-size, black, left, 'light');
}


/* =======================================================================================
    Mixin function courseItemInfoStyling( marginTop, shadowOffset)
    Make the course item info text fields (Course name, lecturer name, course code)...
    style nice, like a bewel inside. Mainly achieved using transparent-ish black background
    and box shadow
======================================================================================= */
@mixin courseItemInfoStyling($margintop, $shadowOffset, $upperBorderRadius, $lowerBorderRadius, $darker:'false') {
    width: 95%;
    margin: $margintop auto 0px auto;
    padding: 5px 0px;
    border: none;
    border-radius: $upperBorderRadius $upperBorderRadius $lowerBorderRadius $lowerBorderRadius;

    @if ($darker == 'true') {
        background-color: rgba(0,0,0,0.25);
        box-shadow: 0px $shadowOffset 0px 0px rgba(0,0,0,0.4);
    } @else {
        background-color: rgba(0,0,0,0.1);
        box-shadow: 0px $shadowOffset 0px 0px rgba(0,0,0,0.25);
    }
}

/* =======================================================================================
    Mixin function wrapperForScrolling( maxHeight, height )
    This mixin style is applied for the div that is wrapper. The idea comes because
    if the HTML is like this:
    <div>
        <button (absolute >
        <list item 1>
        <list item 2>
    </div>
    When the div scrolls, the button which is positioned absolutely, will also scroll.
======================================================================================= */
@mixin wrapperForScrolling($height, $fullWidth) {
    @if ($fullWidth == 'true') {
        width: 100%;
    }
    height: $height;
    overflow-y: auto;
}



/* =======================================================================================
    Fadein effect mixin
    This mixin when applied, will cause element to fade in from the left when first rendered.
======================================================================================= */
@mixin fadeInEffect() {
    animation: fade-in 1s cubic-bezier(0, 0, 0, 1) forwards;
}
@keyframes fade-in {
    from {
        transform: translateX(-50%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}


/* =======================================================================================
    Fadeout effect mixin
    This is a class which when applied, will apply the transition to fade out to the left
======================================================================================= */
.fade-out {
    animation: fade-out 1s cubic-bezier(0, 0, 0, 1) forwards !important;
}
@mixin fade-out {
    animation: fade-out 1s cubic-bezier(0, 0, 0, 1) forwards !important;
}
@keyframes fade-out {
    from {
        transform: translateX(0);
        opacity: 1;
    } to {
        transform: translateX(-50%);
        opacity: 0;
    }
}


/* =======================================================================================
    Scrollbar custom styled
======================================================================================= */
::-webkit-scrollbar {
    width: 10px;
}
 
::-webkit-scrollbar-track {
    background-color: rgba(255,255,255,.3);
    border-radius: 10px;
}
 
::-webkit-scrollbar-thumb {
    border-radius: 5px;
    width: 10%;
    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,1); 
}